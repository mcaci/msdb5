// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package catalog

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p := messageKeyToIndex[key]
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"it": &dictionary{index: itIndex, data: itData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"(%d of %s)": 15,
	"(Name: %s, Cards: %+v, Pile: %+v, Has folded? %t)":                               8,
	"(Turn of: %s, Companion is: %s, Played cards: %s, Auction score: %d, Phase: %d)": 7,
	"(Undefined card)":        10,
	"Callers":                 0,
	"Coin":                    11,
	"Cudgel":                  14,
	"Cup":                     12,
	"Enter name and connect":  16,
	"Error: %+v\n":            4,
	"Game: %+v":               3,
	"Others":                  1,
	"Side deck section: %s\n": 5,
	"Side deck: %s\n":         9,
	"Sword":                   13,
	"The end - %s team has all briscola cards": 2,
	"The end - Callers: %d; Others: %d":        6,
}

var enIndex = []uint32{ // 18 elements
	0x00000000, 0x00000008, 0x0000000f, 0x0000003b,
	0x00000048, 0x0000005b, 0x00000079, 0x000000a1,
	0x00000100, 0x0000013e, 0x00000154, 0x00000165,
	0x0000016a, 0x0000016e, 0x00000174, 0x0000017b,
	0x0000018c, 0x000001a3,
} // Size: 96 bytes

const enData string = "" + // Size: 419 bytes
	"\x02Callers\x02Others\x02The end - %[1]s team has all briscola cards\x02" +
	"Game: %+[1]v\x04\x00\x01\x0a\x0e\x02Error: %+[1]v\x04\x00\x01\x0a\x19" +
	"\x02Side deck section: %[1]s\x02The end - Callers: %[1]d; Others: %[2]d" +
	"\x02(Turn of: %[1]s, Companion is: %[2]s, Played cards: %[3]s, Auction s" +
	"core: %[4]d, Phase: %[5]d)\x02(Name: %[1]s, Cards: %+[2]v, Pile: %+[3]v," +
	" Has folded? %[4]t)\x04\x00\x01\x0a\x11\x02Side deck: %[1]s\x02(Undefine" +
	"d card)\x02Coin\x02Cup\x02Sword\x02Cudgel\x02(%[1]d of %[2]s)\x02Enter n" +
	"ame and connect"

var itIndex = []uint32{ // 18 elements
	0x00000000, 0x0000000a, 0x00000018, 0x0000003f,
	0x0000004d, 0x00000061, 0x0000007f, 0x000000ad,
	0x0000010c, 0x00000150, 0x00000162, 0x00000172,
	0x00000176, 0x0000017c, 0x00000182, 0x0000018a,
	0x0000019b, 0x000001b9,
} // Size: 96 bytes

const itData string = "" + // Size: 441 bytes
	"\x02Chiamanti\x02Non chiamanti\x02Fine - I %[1]s hanno tutte le briscole" +
	"\x02Gioco: %+[1]v\x04\x00\x01\x0a\x0f\x02Errore: %+[1]v\x04\x00\x01\x0a" +
	"\x19\x02Sezione del monte: %[1]s\x02Fine - Chiamanti: %[1]d; Non-chiaman" +
	"ti: %[2]d\x02(Turno di: %[1]s, Compagno: %[2]s, Carte giocate: %[3]s, Pu" +
	"nteggio d'asta: %[4]d, Fase: %[5]d)\x02(Nome: %[1]s, Mano: %+[2]v, Carte" +
	" prese: %+[3]v, Ha foldato? %[4]t)\x04\x00\x01\x0a\x0d\x02Monte: %[1]s" +
	"\x02(Carta assente)\x02Oro\x02Coppe\x02Spade\x02Bastoni\x02(%[1]d di %[2" +
	"]s)\x02Inserisci il nome e collegati"

	// Total table size 1052 bytes (1KiB); checksum: 69254D3B
