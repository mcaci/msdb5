// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package catalog

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p := messageKeyToIndex[key]
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"it": &dictionary{index: itIndex, data: itData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"(%d of %s)": 10,
	"(Name: %s, Cards: %+v, Pile: %+v, Has folded? %t)":                               3,
	"(Turn of: %s, Companion is: %s, Played cards: %s, Auction score: %d, Phase: %s)": 11,
	"(Undefined card)":                  5,
	"Callers":                           12,
	"Coin":                              6,
	"Cudgel":                            9,
	"Cup":                               7,
	"Enter name and connect":            0,
	"Error: %+v\n":                      14,
	"Expecting player %s to play":       1,
	"Game: %+v":                         15,
	"Others":                            13,
	"Phase is not %d but %d":            2,
	"Side deck: %s\n":                   4,
	"Sword":                             8,
	"The end - Callers: %d; Others: %d": 16,
}

var enIndex = []uint32{ // 18 elements
	0x00000000, 0x00000017, 0x00000036, 0x00000053,
	0x00000091, 0x000000a7, 0x000000b8, 0x000000bd,
	0x000000c1, 0x000000c7, 0x000000ce, 0x000000df,
	0x0000013e, 0x00000146, 0x0000014d, 0x00000160,
	0x0000016d, 0x00000195,
} // Size: 96 bytes

const enData string = "" + // Size: 405 bytes
	"\x02Enter name and connect\x02Expecting player %[1]s to play\x02Phase is" +
	" not %[1]d but %[2]d\x02(Name: %[1]s, Cards: %+[2]v, Pile: %+[3]v, Has f" +
	"olded? %[4]t)\x04\x00\x01\x0a\x11\x02Side deck: %[1]s\x02(Undefined card" +
	")\x02Coin\x02Cup\x02Sword\x02Cudgel\x02(%[1]d of %[2]s)\x02(Turn of: %[1" +
	"]s, Companion is: %[2]s, Played cards: %[3]s, Auction score: %[4]d, Phas" +
	"e: %[5]s)\x02Callers\x02Others\x04\x00\x01\x0a\x0e\x02Error: %+[1]v\x02G" +
	"ame: %+[1]v\x02The end - Callers: %[1]d; Others: %[2]d"

var itIndex = []uint32{ // 18 elements
	0x00000000, 0x0000001e, 0x00000041, 0x0000005f,
	0x000000a3, 0x000000b5, 0x000000c5, 0x000000c9,
	0x000000cf, 0x000000d5, 0x000000dd, 0x000000ee,
	0x0000014d, 0x00000157, 0x00000165, 0x00000179,
	0x00000187, 0x000001b5,
} // Size: 96 bytes

const itData string = "" + // Size: 437 bytes
	"\x02Inserisci il nome e collegati\x02Mi aspetto che sia %[1]s a giocare" +
	"\x02La fase non e' %[1]d ma %[2]d\x02(Nome: %[1]s, Mano: %+[2]v, Carte p" +
	"rese: %+[3]v, Ha foldato? %[4]t)\x04\x00\x01\x0a\x0d\x02Monte: %[1]s\x02" +
	"(Carta assente)\x02Oro\x02Coppe\x02Spade\x02Bastoni\x02(%[1]d di %[2]s)" +
	"\x02(Turno di: %[1]s, Compagno: %[2]s, Carte giocate: %[3]s, Punteggio d" +
	"'asta: %[4]d, Fase: %[5]s)\x02Chiamanti\x02Non chiamanti\x04\x00\x01\x0a" +
	"\x0f\x02Errore: %+[1]v\x02Gioco: %+[1]v\x02Fine - Chiamanti: %[1]d; Non " +
	"chiamanti: %[2]d"

	// Total table size 1034 bytes (1KiB); checksum: F27CF8C9
