// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package catalog

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p := messageKeyToIndex[key]
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"it": &dictionary{index: itIndex, data: itData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"(Turn of: %s, Companion is: %s, Played cards: %+v, Auction score: %d, Phase: %d)": 0,
	"Action %s not valid":         5,
	"Error: %+v\n":                2,
	"Expecting player %s to play": 3,
	"Game: %+v":                   9,
	"New Action by %s: %s\nSender info: %+v\nGame info: %+v\n": 1,
	"Phase is not %d but %d":                                   4,
	"Player: %+v\n":                                            6,
	"Side deck section: %+v\n":                                 8,
	"Side deck: %+v\n":                                         7,
	"The end - %s team has all briscola cards":                 10,
	"The end - Callers: %d; Others: %d":                        11,
}

var enIndex = []uint32{ // 13 elements
	0x00000000, 0x00000060, 0x000000a6, 0x000000b9,
	0x000000d8, 0x000000f5, 0x0000010c, 0x00000120,
	0x00000137, 0x00000156, 0x00000163, 0x0000018f,
	0x000001b7,
} // Size: 76 bytes

const enData string = "" + // Size: 439 bytes
	"\x02(Turn of: %[1]s, Companion is: %[2]s, Played cards: %+[3]v, Auction " +
	"score: %[4]d, Phase: %[5]d)\x04\x00\x01\x0aA\x02New Action by %[1]s: %[2" +
	"]s\x0aSender info: %+[3]v\x0aGame info: %+[4]v\x04\x00\x01\x0a\x0e\x02Er" +
	"ror: %+[1]v\x02Expecting player %[1]s to play\x02Phase is not %[1]d but " +
	"%[2]d\x02Action %[1]s not valid\x04\x00\x01\x0a\x0f\x02Player: %+[1]v" +
	"\x04\x00\x01\x0a\x12\x02Side deck: %+[1]v\x04\x00\x01\x0a\x1a\x02Side de" +
	"ck section: %+[1]v\x02Game: %+[1]v\x02The end - %[1]s team has all brisc" +
	"ola cards\x02The end - Callers: %[1]d; Others: %[2]d"

var itIndex = []uint32{ // 13 elements
	0x00000000, 0x00000018, 0x00000035, 0x00000052,
	0x0000006a, 0x00000082, 0x0000009a, 0x000000b7,
	0x000000d4, 0x000000f1, 0x00000109, 0x00000121,
	0x00000139,
} // Size: 76 bytes

const itData string = "" + // Size: 313 bytes
	"\x02Inserire traduzione qui\x04\x00\x01\x0a\x18\x02Inserire traduzione q" +
	"ui\x04\x00\x01\x0a\x18\x02Inserire traduzione qui\x02Inserire traduzione" +
	" qui\x02Inserire traduzione qui\x02Inserire traduzione qui\x04\x00\x01" +
	"\x0a\x18\x02Inserire traduzione qui\x04\x00\x01\x0a\x18\x02Inserire trad" +
	"uzione qui\x04\x00\x01\x0a\x18\x02Inserire traduzione qui\x02Inserire tr" +
	"aduzione qui\x02Inserire traduzione qui\x02Inserire traduzione qui"

	// Total table size 904 bytes (0KiB); checksum: 70106DC2
