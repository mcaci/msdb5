{
    "language": "it",
    "messages": [
        {
            "id": "Enter name and connect",
            "message": "Enter name and connect",
            "translation": "Inserisci il nome e collegati"
        },
        {
            "id": "Callers",
            "message": "Callers",
            "translation": "Chiamanti"
        },
        {
            "id": "Others",
            "message": "Others",
            "translation": "Non chiamanti"
        },
        {
            "id": "The end - {Team} team has all briscola cards",
            "message": "The end - {Team} team has all briscola cards",
            "translation": "Fine - I {Team} hanno tutte le briscole",
            "placeholders": [
                {
                    "id": "Team",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "team"
                }
            ]
        },
        {
            "id": "Game: {RoundInformer}",
            "message": "Game: {RoundInformer}",
            "translation": "Gioco: {RoundInformer}",
            "placeholders": [
                {
                    "id": "RoundInformer",
                    "string": "%+[1]v",
                    "type": "github.com/mcaci/msdb5/app/game.roundInformer",
                    "underlyingType": "interface{AuctionScore() *github.com/mcaci/msdb5/dom/auction.Score; Briscola() github.com/mcaci/msdb5/dom/card.ID; Caller() *github.com/mcaci/msdb5/dom/player.Player; Companion() *github.com/mcaci/msdb5/dom/player.Player; CurrentPlayer() *github.com/mcaci/msdb5/dom/player.Player; IsRoundOngoing() bool; IsSideUsed() bool; Lang() golang.org/x/text/language.Tag; LastPlayer() *github.com/mcaci/msdb5/dom/player.Player; LastPlaying() *container/list.List; Phase() github.com/mcaci/msdb5/app/phase.ID; PlayedCards() *github.com/mcaci/msdb5/dom/deck.Cards; Players() github.com/mcaci/msdb5/dom/team.Players; SideDeck() *github.com/mcaci/msdb5/dom/deck.Cards}",
                    "argNum": 1,
                    "expr": "g"
                }
            ]
        },
        {
            "id": "Error: {Err}",
            "message": "Error: {Err}",
            "translation": "Errore: {Err}",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%+[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "Side deck section: {AuctionScore_printer}",
            "message": "Side deck section: {AuctionScore_printer}",
            "translation": "Sezione del monte: {AuctionScore_printer}",
            "placeholders": [
                {
                    "id": "AuctionScore_printer",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "msg.TranslateCards((*g.SideDeck())[:auction.SideCards(*g.AuctionScore())], printer)"
                }
            ]
        },
        {
            "id": "The end - Callers: {ScoreTeam1}; Others: {ScoreTeam2}",
            "message": "The end - Callers: {ScoreTeam1}; Others: {ScoreTeam2}",
            "translation": "Fine - Chiamanti: {ScoreTeam1}; Non-chiamanti: {ScoreTeam2}",
            "placeholders": [
                {
                    "id": "ScoreTeam1",
                    "string": "%[1]d",
                    "type": "uint8",
                    "underlyingType": "uint8",
                    "argNum": 1,
                    "expr": "scoreTeam1"
                },
                {
                    "id": "ScoreTeam2",
                    "string": "%[2]d",
                    "type": "uint8",
                    "underlyingType": "uint8",
                    "argNum": 2,
                    "expr": "scoreTeam2"
                }
            ]
        },
        {
            "id": "(Turn of: {Name}, Companion is: {BriscolaCard_printer}, Played cards: {PlayedCards_printer}, Auction score: {AuctionScore}, Phase: {Phase})",
            "message": "(Turn of: {Name}, Companion is: {BriscolaCard_printer}, Played cards: {PlayedCards_printer}, Auction score: {AuctionScore}, Phase: {Phase})",
            "translation": "(Turno di: {Name}, Compagno: {BriscolaCard_printer}, Carte giocate: {PlayedCards_printer}, Punteggio d'asta: {AuctionScore}, Fase: {Phase})",
            "placeholders": [
                {
                    "id": "Name",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "g.CurrentPlayer().Name()"
                },
                {
                    "id": "BriscolaCard_printer",
                    "string": "%[2]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "msg.TranslateCard(g.briscolaCard, printer)"
                },
                {
                    "id": "PlayedCards_printer",
                    "string": "%[3]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 3,
                    "expr": "msg.TranslateCards(g.playedCards, printer)"
                },
                {
                    "id": "AuctionScore",
                    "string": "%[4]d",
                    "type": "github.com/mcaci/msdb5/dom/auction.Score",
                    "underlyingType": "uint8",
                    "argNum": 4,
                    "expr": "g.auctionScore"
                },
                {
                    "id": "Phase",
                    "string": "%[5]d",
                    "type": "github.com/mcaci/msdb5/app/phase.ID",
                    "underlyingType": "uint8",
                    "argNum": 5,
                    "expr": "g.phase"
                }
            ]
        },
        {
            "id": "(Name: {Name}, Cards: {Hand_printer}, Pile: {Pile_printer}, Has folded? {Foldedpl})",
            "message": "(Name: {Name}, Cards: {Hand_printer}, Pile: {Pile_printer}, Has folded? {Foldedpl})",
            "translation": "(Nome: {Name}, Mano: {Hand_printer}, Carte prese: {Pile_printer}, Ha foldato? {Foldedpl})",
            "placeholders": [
                {
                    "id": "Name",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "pl.Name()"
                },
                {
                    "id": "Hand_printer",
                    "string": "%+[2]v",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "TranslateCards(*pl.Hand(), printer)"
                },
                {
                    "id": "Pile_printer",
                    "string": "%+[3]v",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 3,
                    "expr": "TranslateCards(*pl.Pile(), printer)"
                },
                {
                    "id": "Foldedpl",
                    "string": "%[4]t",
                    "type": "bool",
                    "underlyingType": "bool",
                    "argNum": 4,
                    "expr": "player.Folded(pl)"
                }
            ]
        },
        {
            "id": "Side deck: {SideDeck_printer}",
            "message": "Side deck: {SideDeck_printer}",
            "translation": "Monte: {SideDeck_printer}",
            "placeholders": [
                {
                    "id": "SideDeck_printer",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "TranslateCards(*gameInfo.SideDeck(), printer)"
                }
            ]
        },
        {
            "id": "(Undefined card)",
            "message": "(Undefined card)",
            "translation": "(Carta assente)"
        },
        {
            "id": "Coin",
            "message": "Coin",
            "translation": "Oro"
        },
        {
            "id": "Cup",
            "message": "Cup",
            "translation": "Coppe"
        },
        {
            "id": "Sword",
            "message": "Sword",
            "translation": "Spade"
        },
        {
            "id": "Cudgel",
            "message": "Cudgel",
            "translation": "Bastoni"
        },
        {
            "id": "({Number} of {Seed})",
            "message": "({Number} of {Seed})",
            "translation": "({Number} di {Seed})",
            "placeholders": [
                {
                    "id": "Number",
                    "string": "%[1]d",
                    "type": "uint8",
                    "underlyingType": "uint8",
                    "argNum": 1,
                    "expr": "c.Number()"
                },
                {
                    "id": "Seed",
                    "string": "%[2]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "seeds[c.Seed()]"
                }
            ]
        }
    ]
}